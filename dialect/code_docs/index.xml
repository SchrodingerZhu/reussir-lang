<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code Documentation on ReuseIR</title><link>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/</link><description>Recent content in Code Documentation on ReuseIR</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/index.xml" rel="self" type="application/rss+xml"/><item><title>ReussirCompositeLayoutInterface</title><link>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirCompositeLayoutInterface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirCompositeLayoutInterface/</guid><description>TypeInterface definitions ReussirCompositeLayoutInterface (ReussirCompositeLayoutInterface) Unified interface for converting type to LLVM struct layout.
Methods: getCompositeLayout ::mlir::reussir::CompositeLayout getCompositeLayout(::mlir::DataLayout dataLayout); Get the CompositeLayout of the type.
NOTE: This method must be implemented by the user.</description></item><item><title>ReussirDialect</title><link>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirDialect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirDialect/</guid><description>&amp;lsquo;reussir&amp;rsquo; Dialect IR for memory reuse analysis</description></item><item><title>ReussirMangleInterface</title><link>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirMangleInterface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirMangleInterface/</guid><description>TypeInterface definitions ReussirMangleInterface (ReussirMangleInterface) Mangle the type so that we have a unique name for its associated functions.
Methods: formatMangledNameTo void formatMangledNameTo(::llvm::raw_ostream &amp;amp;buffer); Return the mangled name of the type.
NOTE: This method must be implemented by the user.</description></item><item><title>ReussirOps</title><link>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirOps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirOps/</guid><description>reussir.clone (reussir::CloneOp) Make sure the object behind the reference can be value-copied
Syntax:
operation ::= `reussir.clone` `(` $object `:` type($object) `)` (`tag` `(` $tag^ `)`)? attr-dict `:` type($result) reussir.clone applies shadow copy to the object behind the reference. That is, it will increase the reference count of sub fields if necessary.
Attributes: AttributeMLIR TypeDescription tag::mlir::IntegerAttrindex attribute Operands: Operand Description object Reussir Reference Type Results: Result Description result any type reussir.</description></item><item><title>ReussirPasses</title><link>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirPasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirPasses/</guid><description>-convert-reussir-to-llvm Convert Low-level Reussir Operations to LLVM IR
This pass is serves as the last step in the Reussir pipeline. It converts all remaining low-level Reussir operations to LLVM IR.
### `-reussir-acquire-release-fusion` _Fuse Reussir acquire and release Operations_ This pass is used to fuse acquire and release operations. ### `-reussir-closure-outlining` _Outlines Reussir Closures_ This pass outlines closures and instantiates their virtual tables. ### `-reussir-expand-control-flow` _Expand structured control flows for Reussir operations_ This pass is used to expand control flows for Reussir operations.</description></item><item><title>ReussirTypes</title><link>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirTypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://SchrodingerZhu.github.io/ReuseIR/dialect/code_docs/ReussirTypes/</guid><description>BFloat16Type bfloat16 floating-point type
ComplexType Complex number with a parameterized element type
Syntax:
complex-type ::= `complex` `&amp;lt;` type `&amp;gt;` The value of complex type represents a complex number with a parameterized element type, which is composed of a real and imaginary value of that element type. The element must be a floating point or integer scalar type.
Example: complex&amp;lt;f32&amp;gt; complex&amp;lt;i32&amp;gt; Parameters: Parameter C++ type Description elementType Type Float8E4M3Type 8-bit floating point with 3 bit mantissa</description></item></channel></rss>